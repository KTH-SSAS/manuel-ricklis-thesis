package test;

import core.AttackStep;
import java.lang.Override;
import java.lang.String;
import java.util.HashSet;
import java.util.Set;

public abstract class AutomaticExploit extends Exploit {
  private Set<Application> _cacheallVulnerableSoftwareAutomaticExploit;

  public AutomaticExploit(String name) {
    super(name);
    assetClassName = "AutomaticExploit";
    AttackStep.allAttackSteps.remove(attemptExploit);
    attemptExploit = new AttemptExploit(name);
  }

  public AutomaticExploit() {
    this("Anonymous");
  }

  protected Set<Application> _allVulnerableSoftwareAutomaticExploit() {
    if (_cacheallVulnerableSoftwareAutomaticExploit == null) {
      _cacheallVulnerableSoftwareAutomaticExploit = new HashSet<>();
      Set<Application> _0 = new HashSet<>();
      Set<Application> _1 = new HashSet<>();
      if (AutomaticExploit.this instanceof AutomaticExploit) {
        if (((test.AutomaticExploit) AutomaticExploit.this).vulnerability != null) {
          if (((test.AutomaticExploit) AutomaticExploit.this).vulnerability.application != null) {
            _0.add(((test.AutomaticExploit) AutomaticExploit.this).vulnerability.application);
          }
        }
      }
      if (AutomaticExploit.this instanceof AutomaticExploit) {
        if (((test.AutomaticExploit) AutomaticExploit.this).vulnerability != null) {
          if (((test.AutomaticExploit) AutomaticExploit.this).vulnerability.softwareProduct != null) {
            for (Application _2 : ((test.AutomaticExploit) AutomaticExploit.this).vulnerability.softwareProduct.softApplications) {
              _1.add(_2);
            }
          }
        }
      }
      _0.addAll(_1);
      for (Application _3 : _0) {
        _cacheallVulnerableSoftwareAutomaticExploit.add(_3);
      }
    }
    return _cacheallVulnerableSoftwareAutomaticExploit;
  }

  public class AttemptExploit extends Exploit.AttemptExploit {
    private Set<AttackStep> _cacheChildrenAttemptExploit;

    public AttemptExploit(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenAttemptExploit == null) {
        _cacheChildrenAttemptExploit = new HashSet<>();
        if (AutomaticExploit.this instanceof AutomaticExploit) {
          _cacheChildrenAttemptExploit.add(((test.AutomaticExploit) AutomaticExploit.this).impact);
        }
      }
      for (AttackStep attackStep : _cacheChildrenAttemptExploit) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("AutomaticExploit.attemptExploit");
    }
  }
}
