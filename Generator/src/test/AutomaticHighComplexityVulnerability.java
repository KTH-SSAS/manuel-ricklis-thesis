package test;

import core.AttackStep;
import java.lang.Override;
import java.lang.String;
import java.util.HashSet;
import java.util.Set;

public abstract class AutomaticHighComplexityVulnerability extends AutomaticallyModeledVulnerability {
  public AutomaticHighComplexityVulnerability(String name, boolean isUserInteractsEnabled,
      boolean isRemoveEnabled) {
    super(name, isUserInteractsEnabled, isRemoveEnabled);
    assetClassName = "AutomaticHighComplexityVulnerability";
    AttackStep.allAttackSteps.remove(abuse);
    abuse = new Abuse(name);
  }

  public AutomaticHighComplexityVulnerability(String name) {
    super(name);
    assetClassName = "AutomaticHighComplexityVulnerability";
    AttackStep.allAttackSteps.remove(abuse);
    abuse = new Abuse(name);
  }

  public AutomaticHighComplexityVulnerability(boolean isUserInteractsEnabled,
      boolean isRemoveEnabled) {
    this("Anonymous", isUserInteractsEnabled, isRemoveEnabled);
  }

  public AutomaticHighComplexityVulnerability() {
    this("Anonymous");
  }

  public class Abuse extends Vulnerability.Abuse {
    private Set<AttackStep> _cacheChildrenAbuse;

    private Set<AttackStep> _cacheParentAbuse;

    public Abuse(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenAbuse == null) {
        _cacheChildrenAbuse = new HashSet<>();
        if (AutomaticHighComplexityVulnerability.this instanceof AutomaticHighComplexityVulnerability) {
          for (Exploit _0 : ((test.AutomaticHighComplexityVulnerability) AutomaticHighComplexityVulnerability.this).exploits) {
            _cacheChildrenAbuse.add(_0.attemptExploit);
          }
        }
      }
      for (AttackStep attackStep : _cacheChildrenAbuse) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentAbuse == null) {
        _cacheParentAbuse = new HashSet<>();
        if (AutomaticHighComplexityVulnerability.this instanceof LHNRVulnerability) {
          _cacheParentAbuse.add(((test.LHNRVulnerability) AutomaticHighComplexityVulnerability.this).userInteracts.disable);
        }
        if (AutomaticHighComplexityVulnerability.this instanceof LHLRVulnerability) {
          _cacheParentAbuse.add(((test.LHLRVulnerability) AutomaticHighComplexityVulnerability.this).userInteracts.disable);
        }
        if (AutomaticHighComplexityVulnerability.this instanceof LHHRVulnerability) {
          _cacheParentAbuse.add(((test.LHHRVulnerability) AutomaticHighComplexityVulnerability.this).userInteracts.disable);
        }
        if (AutomaticHighComplexityVulnerability.this instanceof NHNRVulnerability) {
          _cacheParentAbuse.add(((test.NHNRVulnerability) AutomaticHighComplexityVulnerability.this).userInteracts.disable);
        }
        if (AutomaticHighComplexityVulnerability.this instanceof NHLRVulnerability) {
          _cacheParentAbuse.add(((test.NHLRVulnerability) AutomaticHighComplexityVulnerability.this).userInteracts.disable);
        }
        if (AutomaticHighComplexityVulnerability.this instanceof NHHRVulnerability) {
          _cacheParentAbuse.add(((test.NHHRVulnerability) AutomaticHighComplexityVulnerability.this).userInteracts.disable);
        }
      }
      for (AttackStep attackStep : _cacheParentAbuse) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("AutomaticHighComplexityVulnerability.abuse");
    }
  }
}
